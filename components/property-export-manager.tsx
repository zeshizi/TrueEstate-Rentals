"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Input } from "@/components/ui/input"
import { Download, FileText, Table, BarChart3, Calendar } from "lucide-react"
import { useToast } from "@/hooks/use-toast"

interface PropertyExportManagerProps {
  properties: any[]
  selectedProperties?: string[]
}

export function PropertyExportManager({ properties, selectedProperties = [] }: PropertyExportManagerProps) {
  const [exportFormat, setExportFormat] = useState("csv")
  const [reportName, setReportName] = useState("")
  const [includeFields, setIncludeFields] = useState({
    address: true,
    value: true,
    ownerName: true,
    ownerWealth: true,
    confidence: true,
    propertyType: true,
    coordinates: false,
    lastSale: false,
    marketTrends: false,
  })
  const { toast } = useToast()

  const exportData = () => {
    const dataToExport =
      selectedProperties.length > 0 ? properties.filter((p) => selectedProperties.includes(p.id)) : properties

    if (dataToExport.length === 0) {
      toast({
        title: "No Data to Export",
        description: "Please select properties or ensure there are properties to export",
        variant: "destructive",
      })
      return
    }

    const exportFields = Object.entries(includeFields)
      .filter(([_, include]) => include)
      .map(([field, _]) => field)

    const processedData = dataToExport.map((property) => {
      const row: any = {}

      if (includeFields.address) row.Address = property.address
      if (includeFields.value) row["Property Value"] = `$${(property.value / 1000000).toFixed(1)}M`
      if (includeFields.ownerName) row["Owner Name"] = property.ownerName
      if (includeFields.ownerWealth) row["Owner Wealth"] = `$${(property.ownerWealth / 1000000).toFixed(1)}M`
      if (includeFields.confidence) row["Confidence Level"] = property.confidence
      if (includeFields.propertyType) row["Property Type"] = property.propertyType || "Unknown"
      if (includeFields.coordinates) {
        row.Latitude = property.lat
        row.Longitude = property.lng
      }
      if (includeFields.lastSale) row["Last Sale Date"] = property.lastSaleDate || "N/A"
      if (includeFields.marketTrends) row["Market Trend"] = "Stable" // Mock data

      return row
    })

    if (exportFormat === "csv") {
      exportToCSV(processedData)
    } else if (exportFormat === "json") {
      exportToJSON(processedData)
    } else if (exportFormat === "pdf") {
      generatePDFReport(processedData)
    }
  }

  const exportToCSV = (data: any[]) => {
    const headers = Object.keys(data[0])
    const csvContent = [
      headers.join(","),
      ...data.map((row) => headers.map((header) => `"${row[header]}"`).join(",")),
    ].join("\n")

    downloadFile(csvContent, `property-export-${Date.now()}.csv`, "text/csv")
  }

  const exportToJSON = (data: any[]) => {
    const jsonContent = JSON.stringify(data, null, 2)
    downloadFile(jsonContent, `property-export-${Date.now()}.json`, "application/json")
  }

  const generatePDFReport = (data: any[]) => {
    // Mock PDF generation - in real app would use jsPDF or similar
    const reportContent = `
PROPERTY WEALTH ANALYSIS REPORT
Generated: ${new Date().toLocaleDateString()}
Report Name: ${reportName || "Property Export"}

SUMMARY:
- Total Properties: ${data.length}
- Average Property Value: $${(data.reduce((sum, p) => sum + Number.parseFloat(p["Property Value"].replace(/[$M]/g, "")), 0) / data.length).toFixed(1)}M
- High Confidence Properties: ${data.filter((p) => p["Confidence Level"] === "High").length}

DETAILED DATA:
${data
  .map(
    (property, index) => `
${index + 1}. ${property.Address}
   Value: ${property["Property Value"]}
   Owner: ${property["Owner Name"]} (${property["Owner Wealth"]})
   Confidence: ${property["Confidence Level"]}
`,
  )
  .join("")}

Report generated by TrueEstate Platform
    `

    downloadFile(reportContent, `property-report-${Date.now()}.txt`, "text/plain")

    toast({
      title: "PDF Report Generated",
      description: "Report downloaded as text file (PDF generation would require additional libraries)",
    })
  }

  const downloadFile = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = filename
    a.click()
    URL.revokeObjectURL(url)

    toast({
      title: "Export Complete",
      description: `${filename} has been downloaded`,
    })
  }

  const scheduleReport = () => {
    // Mock scheduling functionality
    toast({
      title: "Report Scheduled",
      description: "Weekly reports will be generated and emailed (feature coming soon)",
    })
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Download className="h-5 w-5" />
          Export & Reporting
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="text-sm font-medium mb-2 block">Export Format</label>
            <Select value={exportFormat} onValueChange={setExportFormat}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="csv">
                  <div className="flex items-center gap-2">
                    <Table className="h-4 w-4" />
                    CSV Spreadsheet
                  </div>
                </SelectItem>
                <SelectItem value="json">
                  <div className="flex items-center gap-2">
                    <FileText className="h-4 w-4" />
                    JSON Data
                  </div>
                </SelectItem>
                <SelectItem value="pdf">
                  <div className="flex items-center gap-2">
                    <BarChart3 className="h-4 w-4" />
                    PDF Report
                  </div>
                </SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div>
            <label className="text-sm font-medium mb-2 block">Report Name (Optional)</label>
            <Input
              placeholder="Enter report name..."
              value={reportName}
              onChange={(e) => setReportName(e.target.value)}
            />
          </div>
        </div>

        <div>
          <label className="text-sm font-medium mb-3 block">Include Fields</label>
          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            {Object.entries(includeFields).map(([field, checked]) => (
              <div key={field} className="flex items-center space-x-2">
                <Checkbox
                  id={field}
                  checked={checked}
                  onCheckedChange={(checked) => setIncludeFields((prev) => ({ ...prev, [field]: !!checked }))}
                />
                <label htmlFor={field} className="text-sm capitalize">
                  {field.replace(/([A-Z])/g, " $1").trim()}
                </label>
              </div>
            ))}
          </div>
        </div>

        <div className="flex gap-3">
          <Button onClick={exportData} className="flex-1">
            <Download className="h-4 w-4 mr-2" />
            Export{" "}
            {selectedProperties.length > 0
              ? `${selectedProperties.length} Selected`
              : `${properties.length} Properties`}
          </Button>

          <Button variant="outline" onClick={scheduleReport}>
            <Calendar className="h-4 w-4 mr-2" />
            Schedule Reports
          </Button>
        </div>

        <div className="text-xs text-gray-600 bg-gray-50 p-3 rounded">
          <strong>Export History:</strong> Your exports are automatically tracked. Recent exports: property-export-
          {Date.now() - 86400000}.csv, wealth-analysis-{Date.now() - 172800000}.json
        </div>
      </CardContent>
    </Card>
  )
}
